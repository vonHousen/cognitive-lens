import Head from "next/head";
import { Geist, Geist_Mono } from "next/font/google";
import { useState } from "react";
import styles from "@/styles/Home.module.css";
import Block from "@/components/Block";
import ConversationBlock from "@/components/ConversationBlock";
import SOAPBlock from "@/components/SOAPBlock";
import TextContainer from "@/components/TextContainer";
import { messagesStarter, soapMassiveContentStarter, Message, soapContentStarter, thinkingProcessStarter, thinkingProcessMassive } from "@/utils/constants";
import { ResponseFormat, LLMResponse } from "@/utils/llm";
import { runNode } from "@/utils/api";
import { SOAPData } from "@/components/SOAPBlock";
import ThinkingContainer from "@/components/ThinkingContainer";
import { ThinkingProcessData } from "@/components/ThinkingContainer";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export default function Home() {
  const [messages, setMessages] = useState<Message[]>(messagesStarter);
  const [soapData, setSoapData] = useState<SOAPData>(soapContentStarter);
  const [thinkingData, setThinkingData] = useState<ThinkingProcessData>(thinkingProcessStarter);
  const [isLoading, setIsLoading] = useState(false);

  const handleAddMessage = async (fullConversation: Message[]) => {
    try {
      setIsLoading(true);
      
      // Extract just the user/assistant messages (excluding system) for state
      const userAssistantMessages = fullConversation.filter(msg => msg.role !== 'system');
      setMessages(userAssistantMessages);

      // Prepare conversation for backend (convert Message[] to ConversationMessage[])
      const backendConversation = fullConversation.map(msg => ({
        role: msg.role,
        content: msg.content
      }));

      // Debug: Log the request being sent to backend
      console.log('ðŸš€ SENDING TO BACKEND:', {
        conversation: backendConversation,
        output_schema: ResponseFormat
      });

      // Call backend API
      const response = await runNode({
        conversation: backendConversation,
        output_schema: ResponseFormat
      });

      // Debug: Log the raw response from backend
      console.log('ðŸ“¥ RAW BACKEND RESPONSE:', response);

      if (response.success && response.messages?.output_message) {
        const messageContent = response.messages.output_message.content;
        
        // Update thinking process data if available
        if (response.messages?.thinking_process) {
          setThinkingData({
            steps: response.messages.thinking_process.map((step: any) => ({
              role: step.role,
              content: step.content
            }))
          });
        }

        // Try to parse as JSON to check for SOAP updates
        let parsedResponse: LLMResponse;
        try {
          parsedResponse = JSON.parse(messageContent) as LLMResponse;
        } catch (e) {
          // If not JSON, treat as plain text response
          parsedResponse = { respond_to_patient: messageContent };
        }

        // Always add the response to patient as assistant message
        const assistantMessage: Message = {
          role: 'assistant',
          content: parsedResponse.respond_to_patient || messageContent,
          timestamp: new Date()
        };

        setMessages(prev => [...prev, assistantMessage]);

        // Update SOAP data if any SOAP fields are present
        if (parsedResponse.updated_general_info || 
            parsedResponse.updated_subjective || 
            parsedResponse.updated_objective || 
            parsedResponse.updated_assessment || 
            parsedResponse.updated_plan) {
          
          setSoapData(prevSoap => ({
            patientInfo: parsedResponse.updated_general_info || prevSoap.patientInfo,
            S: parsedResponse.updated_subjective || prevSoap.S,
            O: parsedResponse.updated_objective || prevSoap.O,
            A: parsedResponse.updated_assessment || prevSoap.A,
            P: parsedResponse.updated_plan || prevSoap.P
          }));
        }
      }
    } catch (error) {
      console.error('Error calling backend:', error);
      // Optionally add an error message to the conversation
      const errorMessage: Message = {
        role: 'assistant',
        content: 'Sorry, I encountered an error. Please try again.',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div
        className={`${styles.page} ${geistSans.variable} ${geistMono.variable}`}
      >
        <main className={styles.main}>
          <Block>
            <SOAPBlock data={soapData} />
          </Block>

          <Block>
            <ConversationBlock 
              messages={messages} 
              soapData={soapData}
              onAddMessage={handleAddMessage}
            />
            {isLoading && (
              <div style={{ padding: '1rem', textAlign: 'center', color: '#666' }}>
                Assistant is thinking...
              </div>
            )}
          </Block>

          <Block>
            <ThinkingContainer data={thinkingData} />
          </Block>
        </main>
      </div>
    </>
  );
}
